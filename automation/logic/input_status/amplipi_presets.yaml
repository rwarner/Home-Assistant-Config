# Required automation for listening to the input_status to change the AmpliPi
# See the script that's handling deeper logic
- alias: AMPLIPI - AmpliPi Preset input_select
  id: 3de8315f-d95d-4827-9df3-1b62adb94746
  trigger:
    - trigger: state
      entity_id: input_select.amplipi_presets
  action:
    - action: script.amplipi_handle_preset
      data:
        preset_name: "{{ trigger.to_state.state }}"


# Every hour, fetch all the presets from the AmpliPi and store them
# in a rest variable sensor called "sensor.amplipi_presets"
- alias: "AMPLIPI - Fetch and Update AmpliPi Presets"
  id: 0830ca86-05a3-43b4-a6b9-50fe5bb2b0b9
  trigger:
    trigger: time_pattern
    hours: "/1"
  action:
    - action: input_select.set_options
      data_template:
        entity_id: input_select.amplipi_dynamic_presets
        options: >
          {% set preset_state = states('sensor.amplipi_presets') %}
          {% if preset_state %}
            {{ preset_state.split(', ') | list }}
          {% else %}
            []
          {% endif %}


# Listen to the dynamically loaded "input_select.amplipi_dynamic_presets"
# When only a user executes a selection, look up the matching selected "name"
# in the JSON which exists in "sensor.amplipi_presets" attribute "presets".
# If we do find a matching ID, send it to our rest_command which tells
# AmpliPi to use that given preset 
- alias: "AMPLIPI - Find Matching Preset ID"
  id: 3a243a2f-9b8c-4ecf-8e55-69834ce4ecbd
  trigger:
    trigger: state
    entity_id: input_select.amplipi_dynamic_presets
  condition:
    - condition: template
      value_template: >
        {{ trigger.to_state.context.user_id is not none }}
  action:
    - variables:
        selected_preset_name: "{{ trigger.to_state.state }}"  # The name selected in input_select
        matching_preset_id: >
          {% set presets = state_attr('sensor.amplipi_presets', 'presets') %}
          {% if presets %}
            {% for preset in presets %}
              {% if preset.name == selected_preset_name %}
                {{ preset.id }}
              {% endif %}
            {% endfor %}
          {% else %}
            "Not found"
          {% endif %}
    # Only call rest_command if a valid ID was found
    - condition: template
      value_template: "{{ matching_preset_id != 'Not found' }}"
    # Call the rest_command with the matched preset ID
    - action: rest_command.amplipi_set_preset
      data:
        preset: "{{ matching_preset_id }}"
